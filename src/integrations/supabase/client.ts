
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://oqtzvbhguatgwucfltin.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9xdHp2YmhndWF0Z3d1Y2ZsdGluIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MjQ4MTEyOSwiZXhwIjoyMDU4MDU3MTI5fQ.YdH208C-dvz8GTA7yEuj_1T2Aq_gpvKkg_yaT23_xLw";

// Create a single supabase client for interacting with your database
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    }
  }
);

// Define valid table names to match Supabase's expected types
type ValidTableNames = 'games' | 'game_players' | 'profiles' | 'teams' | 'player_cards' | 'trick_cards' | 'tricks' | 'game_messages';

// Helper function to avoid deep type instantiation issues
export async function simplifiedSelect<T = Record<string, any>>(
  from: ValidTableNames,
  select: string = '*',
  filters?: { column: string, value: any }[]
): Promise<{ data: T[] | null, error: any }> {
  let query = supabase.from(from).select(select);
  
  if (filters && filters.length > 0) {
    filters.forEach(filter => {
      // @ts-ignore - We're using a dynamic approach here
      query = query.eq(filter.column, filter.value);
    });
  }
  
  // Use a type assertion to simplify the return type
  return query as unknown as Promise<{ data: T[] | null, error: any }>;
}
